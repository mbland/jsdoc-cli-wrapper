#!/bin/sh
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# Wraps the jsdoc.js command on non-Windows platforms.
#
# This is necessary to support older Node versions as package.json engines
# without removing the `"type": "module"` specifier. Without this shim, running
# `pnpm test` under many older verions caused runJsdoc.test.js and main.test.js
# to fail on the spawn(jsdocPath) call within runJsdoc().
#
# These older versions couldn't grok that the previous `jsdoc` stub was really
# written in ECMAScript Module style without a file extension:
#
#   TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension "" for
#   .../jsdoc-cli-wrapper/test/fixtures/jsdocStub/jsdoc. Loading extensionless
#   files is not supported inside of "type":"module" package.json contexts. The
#   package.json file .../jsdoc-cli-wrapper/package.json caused this
#   "type":"module" context. Try changing
#   .../jsdoc-cli-wrapper/test/fixtures/jsdocStub/jsdoc to have a file
#   extension. Note the "bin" field of package.json can point to a file with an
#   extension, for example
#   {"type":"module","bin":{"jsdoc":"./test/fixtures/jsdocStub/jsdoc.js"}}
#
# I tried adding the `--experimental-default-type=module` flag to the shebang
# line of the former `jsdoc` stub. Only after trying that did I realize that
# `#!/usr/bin/env` style shebangs don't support passing command line arguments
# to the specified interpreter.
#
# Hence moving the original `jsdoc` stub to `jsdoc.js` and invoking it via this
# one-line wrapper.

exec node "${0}.js" "$@"
